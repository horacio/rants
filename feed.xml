<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>svankmajer's blog</title>
  <subtitle>a learning logbook</subtitle>
  <id>http://rants.svankmajer.net/</id>
  <link href="http://rants.svankmajer.net/"/>
  <link href="http://rants.svankmajer.net/feed.xml" rel="self"/>
  <updated>2014-08-19T21:44:00-03:00</updated>
  <author>
    <name>svankmajer</name>
  </author>
  <entry>
    <title>ActiveModel validations</title>
    <link rel="alternate" href="http://rants.svankmajer.net/2014/08/20/activemodel-validators/"/>
    <id>http://rants.svankmajer.net/2014/08/20/activemodel-validators/</id>
    <published>2014-08-19T21:44:00-03:00</published>
    <updated>2014-08-21T11:10:19-03:00</updated>
    <author>
      <name>svankmajer</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday, I fired up a console and started to code a &lt;a href="http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#breakable_toys"&gt;breakable toy&lt;/a&gt; to see if I could drive its development using integration test driven development, which I haven&amp;#39;t yet exercised properly. It&amp;#39;s called Luego (&amp;#39;Later&amp;#39; in Spanish) and is, simply, a Pocket clone. I love &lt;a href="https://getpocket.com/about"&gt;Pocket&lt;/a&gt;. Last year, I was in the top 5% of readers in Pocket. I expect similar results for this year. It is an indispensable tool to me, like &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; and &lt;a href="https://basecamp.com/"&gt;Basecamp&lt;/a&gt;, two other great products I use daily. So I wanted to think about how would I make my own Pocket, putting in practice what I&amp;#39;ve learned so far about Test-Driven Development. &lt;/p&gt;

&lt;p&gt;I sat down for a few hours and wrote down how Pocket could be designed at a ridiculously high level. Now, I would&amp;#39;ve loved to run an adapted version of a &lt;a href="http://robots.thoughtbot.com/the-product-design-sprint"&gt;Product Design Sprint&lt;/a&gt; for this side-project, but I didn&amp;#39;t, because I thought it would be too much. It would&amp;#39;ve been. So, just pencil and paper, lots of fresh water and winter sunlight, and the unstoppable purring of my cats. It was a tough but pedagogical experience, and I think it has greatly improved my web application development process.&lt;/p&gt;

&lt;p&gt;I know is hard to conceive at this point, but this blog post isn&amp;#39;t about the whole design &amp;amp; implementation process (mayhaps in the next post, who knows) but about something I&amp;#39;ve learned about custom validations of ActiveRecord models.&lt;/p&gt;

&lt;p&gt;In a nutshell, model-level ActiveRecord validations check your object&amp;#39;s state before it hits the database to ensure only valid data gets saved. This means, merely, that when you run &lt;code&gt;save&lt;/code&gt; on your ActiveRecord model instance, all configured validations are triggered, returning true if all of them passed or false if they didn&amp;#39;t; if they didn&amp;#39;t, you call call &lt;code&gt;errors.messages&lt;/code&gt; to see a detail of those validation errors. As you can see, validations are very useful, very low cost (i.e. really easy to test and maintain) and really easy to use.&lt;/p&gt;

&lt;p&gt;Rails has lots of common, pre-defined validation helpers (like &lt;code&gt;presence&lt;/code&gt;, &lt;code&gt;uniqueness&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, etc.), but also gives you the possibility to define your own custom validators and validation methods. I&amp;#39;ve used pre-defined validators in my previous Rails applications, but I never really needed a custom solution for some kind of complex validation&amp;hellip; until now (or that&amp;#39;s what I thought initially). So I went straight to the &lt;a href="http://guides.rubyonrails.org/"&gt;Rails guides&lt;/a&gt;, which are excellent resources, and started reading about the different ways I could implement them.&lt;/p&gt;

&lt;p&gt;Rails offers two ways to implement custom validation: &lt;strong&gt;custom validators&lt;/strong&gt; and &lt;strong&gt;custom validation methods&lt;/strong&gt;. Custom validators are classes that extend &lt;code&gt;ActiveModel::Validator&lt;/code&gt; and implement a &lt;code&gt;validate(record)&lt;/code&gt; method. You can use this validator calling &lt;code&gt;validates_with :my_custom_validator&lt;/code&gt; in your model class. Here is a code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyCustomValidator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Validator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# this is where you perform your validation&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, in your model class, you call the validator like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Validations&lt;/span&gt;

   &lt;span class="c1"&gt;# other validations&lt;/span&gt;
   &lt;span class="n"&gt;validates_with&lt;/span&gt; &lt;span class="ss"&gt;:my_custom_validator&lt;/span&gt;

   &lt;span class="c1"&gt;# the rest of your awesome class&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat, eh?&lt;/p&gt;

&lt;p&gt;You could add your custom validators in &lt;code&gt;app/validators&lt;/code&gt; and they will be automatically loaded on start-up.&lt;/p&gt;

&lt;p&gt;You could also check specific attributes of your records using &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt; which must implement a &lt;code&gt;validate_each(record, attribute, value)&lt;/code&gt; method. Or, you could use a custom validation method registering it with &lt;code&gt;validate&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;:inside_opening_hours?&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inside_opening_hours?&lt;/span&gt;
     &lt;span class="c1"&gt;# here you perform your needed validations&lt;/span&gt;
     &lt;span class="c1"&gt;# ... add some errors if conditions are not met!&lt;/span&gt;
     &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:taken_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"can't take order this late"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should totally check the &lt;a href="http://guides.rubyonrails.org/active_record_validations.html"&gt;Active Record Validations&lt;/a&gt; guide in the Rails Guides website. I wholeheartedly recommend it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rake 0.9</title>
    <link rel="alternate" href="http://rants.svankmajer.net/2014/06/26/rake-0-9/"/>
    <id>http://rants.svankmajer.net/2014/06/26/rake-0-9/</id>
    <published>2014-06-26T01:50:00-03:00</published>
    <updated>2014-08-20T18:37:32-03:00</updated>
    <author>
      <name>svankmajer</name>
    </author>
    <content type="html">&lt;p&gt;Reading &lt;code&gt;bbatsov&lt;/code&gt;&amp;#39;s &lt;a href="http://batsov.com/articles/2014/05/30/find-out-where-a-rake-task-is-defined/"&gt;blog&lt;/a&gt; (Rubocop creator), I found out about something
cool introduced on Rake 0.9. Take a look at this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rake -W publish
rake publish  /home/svankmajer/.rvm/gems/ruby-2.1.2@rants/../gh-pages.rake:65:in &lt;span class="sb"&gt;`&lt;/span&gt;&amp;lt;top &lt;span class="o"&gt;(&lt;/span&gt;required&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="s1"&gt;'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeap, &lt;code&gt;rake -W &amp;lt;task&amp;gt;&lt;/code&gt; resolves to where the task is defined. You can also run it without parameters and see that output for all available tasks. Pretty 
solid.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Git - Stashing (annex)</title>
    <link rel="alternate" href="http://rants.svankmajer.net/2014/06/04/git-stash/"/>
    <id>http://rants.svankmajer.net/2014/06/04/git-stash/</id>
    <published>2014-06-04T15:12:00-03:00</published>
    <updated>2014-08-20T09:38:45-03:00</updated>
    <author>
      <name>svankmajer</name>
    </author>
    <content type="html">&lt;p&gt;You all know about good ol&amp;#39; &lt;code&gt;git-stash&lt;/code&gt;. If you happen to don&amp;#39;t know about it, don&amp;#39;t worry and, please, fearlessly run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ man git-stash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No sweat. It might be the only intelligible Git man page of all Git man pages. But today&amp;#39;s post highlights something that doesn&amp;#39;t appear in this man 
page and I that didn&amp;#39;t know until minutes ago. I thought it might be cool to share it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Essentially, &lt;code&gt;git-stash&lt;/code&gt; lets you save the current state of your working directory away and enjoy a pristine working directory that points to &lt;code&gt;HEAD&lt;/code&gt; 
afterwards. Those stashed local modifications can be listed, inspected and applied on top of a particular commit. They are stored in &lt;code&gt;refs/stash&lt;/code&gt; and they
can be referenced using standard reflog syntax, e.g. &lt;code&gt;stash{0}&lt;/code&gt; for the last saved stash, &lt;code&gt;stash{1}&lt;/code&gt; for the previous. &lt;code&gt;stash{2.hours.ago}&lt;/code&gt; is also possible. Slick. &lt;/p&gt;

&lt;p&gt;So, for example, if you want to inspect the penultimate stash, you go like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git stash show -p stash@{1}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To get something along the lines of:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight diff"&gt;&lt;span class="gh"&gt;diff --git a/source.rb b/source.rb
index e69de29..a5c8076 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/index.html
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/index.html
&lt;/span&gt;&lt;span class="err"&gt;@@ -0,0 +1 @@
&lt;/span&gt;&lt;span class="gi"&gt;+An important diff.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing particularly esoteric here.&lt;/p&gt;

&lt;p&gt;Unfortunately, though, it seems that &lt;strong&gt;you can&amp;#39;t see the diffstat for stashed untracked files&lt;/strong&gt; going like that. If you stashed untracked files with 
&lt;code&gt;git stash -u&lt;/code&gt; along with other local changes, running &lt;code&gt;git stash show -p stash@{n}&lt;/code&gt; won&amp;#39;t show any pleasant results. What the heck? &lt;/p&gt;

&lt;p&gt;Turns out that what happens is not documented anywhere but can be inferred 
&lt;a href="https://github.com/git/git/commit/787513027a7d0af3c2cd2f04b85bc7136d580586"&gt;by looking at the commit that introduced the -u functionality&lt;/a&gt;&amp;hellip; or by running
&lt;code&gt;git log --graph stash@{0}&lt;/code&gt; that prints out something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;*-.   commit 3dac63a4f4c0db4167b1f73699ed15ed6f0e9189
|\ \  Merge: 01adf14 7e6b4ff feab0b4
| | | Author: svankmajer &amp;lt;svankmajer@svankmajer.net&amp;gt;
| | | Date:   Wed Jun 4 16:09:03 2014 -0300
| | | 
| | |     WIP on master: 01adf14 Initial commit.
| | |    
| | * commit feab0b459862a383886a4b746f1827dd4630fb2d
| |   Author: svankmajer &amp;lt;svankmajer@svankmajer.net&amp;gt;
| |   Date:   Wed Jun 4 16:09:03 2014 -0300
| |   
| |       untracked files on master: 01adf14 Initial commit.
| |   
| * commit 7e6b4fff39516454ceb2fef244ce5db6ed6f4aca
|/  Author: svankmajer &amp;lt;svankmajer@svankmajer.net&amp;gt;
|   Date:   Wed Jun 4 16:09:03 2014 -0300
|   
|       index on master: 01adf14 Initial commit.
|  
* commit 01adf14673212f4bdab771eb11b2f42f84e57df3
  Author: svankmajer &amp;lt;svankmajer@svankmajer.net&amp;gt;
    Date:   Wed Jun 4 16:08:26 2014 -0300

            Initial commit.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Investigating a little bit on StackOverflow, I learned that &lt;strong&gt;untracked files are stored in the third parent of a stash commit&lt;/strong&gt;. Yes, stash@{0} has three 
parents. The first parent was the HEAD of the tree at the moment of &lt;code&gt;git stash save&lt;/code&gt;. The second parent stores the state of the index. The third parent 
stores the state of the untracked files in the working directory. This means that you can see the untracked part of the last stash doing:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git show stash@{0}^3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also see the untracked file in the tree doing (notice the colon at the end):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git show stash@{0}^3:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m still sad that there isn&amp;#39;t a nice way to summarize the differences between staged, unstaged and untracked vs. actual state. Now I know that this is
due partly to the way stashes are re-applied. But oh well, there is nothing stopping me from creating the difftool of my dreams.&lt;/p&gt;

&lt;p&gt;Maybe I will.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reborn</title>
    <link rel="alternate" href="http://rants.svankmajer.net/2014/05/29/reborn/"/>
    <id>http://rants.svankmajer.net/2014/05/29/reborn/</id>
    <published>2014-05-29T12:46:00-03:00</published>
    <updated>2014-08-20T09:37:55-03:00</updated>
    <author>
      <name>svankmajer</name>
    </author>
    <content type="html">&lt;p&gt;Great plans for the weekend! On saturday I will be attending the weekly meetup of &lt;a href="http://www.congresointeractivo.org/"&gt;Congreso Interactivo&lt;/a&gt; at 
the Barracas Public Library &lt;a href="http://www.bibliobarracas.com.ar/hacklab/"&gt;Hacklab&lt;/a&gt; here in Buenos Aires.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;CI is a &lt;strong&gt;good&lt;/strong&gt; civic engagement organisation devoted to social research and the development of &lt;a href="http://en.wikipedia.org/wiki/Open_government"&gt;open goverment&lt;/a&gt; tools to improve the exercise of governance towards a better democracy. They have released upstanding apps like &lt;a href="http://www.elegilegi.org/"&gt;Elegilegi&lt;/a&gt; and 
&lt;a href="http://www.decadavotada.com.ar/"&gt;Decada Votada&lt;/a&gt;, drawing attention of &lt;a href="http://www.lanacion.com.ar/1604004-como-votarias-siendo-diputado"&gt;local&lt;/a&gt; and 
&lt;a href="https://source.opennews.org/en-US/articles/decada-votada-news-app-track-voting-records/"&gt;international&lt;/a&gt; news.&lt;/p&gt;

&lt;p&gt;Since I was a teenager I dream of being part of a open goverment initiative and I think this is a great opportunity for me to add up to a team effort 
towards the envision and effective implementation of an open democracy in Argentina.&lt;/p&gt;

&lt;p&gt;M-x start-hacking.&lt;/p&gt;
</content>
  </entry>
</feed>
